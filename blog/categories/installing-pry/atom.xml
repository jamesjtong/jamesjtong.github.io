<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Installing Pry | Experimenting with Code]]></title>
  <link href="http://jamesjtong.github.io/blog/categories/installing-pry/atom.xml" rel="self"/>
  <link href="http://jamesjtong.github.io/"/>
  <updated>2014-12-28T13:49:08-05:00</updated>
  <id>http://jamesjtong.github.io/</id>
  <author>
    <name><![CDATA[James Tong]]></name>
    <email><![CDATA[jtong33@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pry - IRB's Smarter Younger Brother]]></title>
    <link href="http://jamesjtong.github.io/blog/2013/10/10/pry-irbs-younger-brother/"/>
    <updated>2013-10-10T11:58:00-04:00</updated>
    <id>http://jamesjtong.github.io/blog/2013/10/10/pry-irbs-younger-brother</id>
    <content type="html"><![CDATA[<hr />

<p>Pry is one of my favorite gems. It is a REPL (it reads, evaluates, prints, loops). Pry is a replacement for Ruby&rsquo;s default REPL, irb. Pry&rsquo;s advantages over irb are Pry adds additional features such as syntax-highlighting, auto indenting, and super useful debugging features. To install pry and its plugins (in this guide, I will also be using pry-byebug), perform the following commands:</p>

<pre><code>$ gem install pry  
$ gem install pry-byebug
</code></pre>

<p>Once you have those gems installed, you can enter into a session with pry, by just typing pry in your Terminal.</p>

<pre><code>$ pry
</code></pre>

<p>My absolute favorite feature of pry is its ability to load any portion of a file you are working on in your text editor directly into your REPL session. Let&rsquo;s say you are working in sublime text 2, so below is your prime.rb file:</p>

<pre><code class="ruby">#prime.rb
def prime?(num)
  (1..(num/2)).select {|element| num % element == 0}.length == 1
end
binding.pry
def every_prime(num)
  (1..num).each {|element| puts "#{element} is a prime? #{prime?(element)} "}
end
</code></pre>

<p>If I wanted to play around with these methods, I normally would have had to copy and paste everything into my REPL session. Right now, this doesn&rsquo;t seem like a big issue for my file as it is literally less than 10 lines long. However, imagine if I had a file that contains thousands of lines. Try copying and pasting something like that into your terminal (Don&rsquo;t actually try it, it may take a while).</p>

<p>So how does pry tackle this problem?<br/>
<em>binding.pry</em></p>

<p>So how do we use binding.pry?</p>

<p>The way you do this is by requiring the pry gem at the beginning of the file and then use binding.pry wherever you want to REPL to load into.</p>

<pre><code class="ruby">#prime.rb
def prime?(num)
  (1..(num/2)).select {|element| num % element == 0}.length == 1
end
binding.pry
def every_prime(num)
  (1..num).each {|element| puts "#{element} is a prime? #{prime?(element)} "}
end
</code></pre>

<p><em>(notice how we put &ldquo;binding.pry&rdquo; after our first method &ldquo;prime?(num)&rdquo;; this causes the repl to only load the first method. If we wanted to play around with the &ldquo;every_prime(num)&rdquo; method, then we would have to put change the location of &ldquo;binding.pry to the end of the file.).</em></p>

<p>All we need to do now is type &ldquo;ruby primes.rb&rdquo; in our terminal.</p>

<pre><code>$ ruby primes.rb
</code></pre>

<p>Ok, so we&rsquo;ve went through pry a little. Now, let&rsquo;s go through pry-byebug(use pry-debugger for ruby versions before 2.0).  We use pry-byebug in much the same way as using pry. Pry-byebug is really useful if you want to step through loops. Pry lets you see what certain variables are equal to at different points of your code.</p>

<p>To realize the full utility of pry-byebug, let&rsquo;s take a look at slightly more complex and messy code.</p>

<pre><code class="ruby">#pigeon_organizer.rb
require 'pry'

pigeon_data = {
  :color =&gt; {
    :purple =&gt; ["Theo", "Peter Jr.", "Lucky"],
    :grey =&gt; ["Theo", "Peter Jr.", "Ms .K"],
    :white =&gt; ["Queenie", "Andrew", "Ms .K", "Alex"],
    :brown =&gt; ["Queenie", "Alex"]
  },
  :gender =&gt; {
    :male =&gt; ["Alex", "Theo", "Peter Jr.", "Andrew", "Lucky"],
    :female =&gt; ["Queenie", "Ms .K"]
  },
  :lives =&gt; {
    "Subway" =&gt; ["Theo", "Queenie"],
    "Central Park" =&gt; ["Alex", "Ms .K", "Lucky"],
    "Library" =&gt; ["Peter Jr."],
    "City Hall" =&gt; ["Andrew"]
  }
}

def reorganize(data)
  new_hash={}
  data.each do |attribute, specific_attrib|
    specific_attrib.each do |specific_attrib, birds_array|
      birds_array.each do |bird|
        binding.pry
        new_hash[bird] ||= {}
        if data[attribute][specific_attrib].include?(bird)
          if attribute != :color
            new_hash[bird][attribute] ||= specific_attrib.to_s
          else 
            if new_hash[bird][attribute]
              new_hash[bird][attribute].push(specific_attrib.to_s)
            else
              new_hash[bird][attribute] = [specific_attrib.to_s]
            end
          end
        end
      end
    end
  end
  new_hash
end

reorganize(pigeon_data)
</code></pre>

<p>What pry-byebug allows you to do is to step through your code. Notice how I put my binding.pry in the middle of my method. I do this so that when I open my file I go to that specific line of my code. I use pry so that I am able to see what variables equal at that specific point of code. This is extremely useful for debugging. Now open your ruby file again normally:</p>

<pre><code>$ ruby pigeon_organizer.rb
</code></pre>

<p>You will end up with something like this:</p>

<p><img class="<a" src="href="http://jamesjtong.com/images/screenshotforpry.png">http://jamesjtong.com/images/screenshotforpry.png</a>&#8221;></p>

<p>First type &lsquo;q&rsquo; to enter back into your pry session.
    q</p>

<p>You can see a group of your local variables/methods with the &lsquo;ls&rsquo; command. You can even type in the name of the variable to see what it is currently defined as (shown below).</p>

<p><img class="<a" src="href="http://jamesjtong.com/images/pryss2.png">http://jamesjtong.com/images/pryss2.png</a>&#8221;></p>

<p>As this is just an intro. to Pry and Pry-byebug and there are so many different things to learn about them, I will let you explore these two gems on your own. In this pry session, some other commands that you may want to try on your own are &lsquo;help&rsquo;, &lsquo;cd&rsquo;, &lsquo;quit&rsquo;, &lsquo;step&rsquo;, &lsquo;next&rsquo;.</p>

<h2><strong>Other resources</strong></h2>

<p>Watch this video <a href="http://www.youtube.com/watch?v=A494WFSi6HU">Pry by Railscasts</a><br/>
Read more about pry at <a href="https://github.com/pry/pry">Pry github repo</a><br/>
Read more about pry-byebug at <a href="https://github.com/deivid-rodriguez/pry-byebug">Pry-byebug github repo</a></p>

<p>Thanks for reading!</p>
]]></content>
  </entry>
  
</feed>
